/**
 * This file was automatically generated by the Mule Development Kit
 */
package net.deepvoodoo.mule.modules.JpaOpenSessionInView;

import javax.inject.Inject;
import javax.persistence.EntityManager;
import javax.persistence.EntityManagerFactory;
import javax.persistence.PersistenceContext;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.mule.api.annotations.Module;
import org.mule.api.MuleEvent;
import org.mule.api.MuleException;
import org.mule.api.annotations.Category;
import org.mule.api.annotations.Configurable;
import org.mule.api.annotations.Processor;
import org.mule.api.annotations.param.Default;
import org.mule.api.annotations.param.Optional;
import org.mule.api.callback.SourceCallback;
import org.mule.management.stats.ProcessingTime;

/**
 * An intercepting mule-module that implements the open-session-in-view pattern 
 * for jpa across components in a mule flow. It manages obtaining, exposing, and
 * closing a jpa EntityManager for the mule processor chain it precedes in a 
 * mule flow.
 *
 * @author Matthew Meyer (mjmeyer23@gmail.com)
 */
@Module(name="osiv", schemaVersion="0.0.1-SNAPSHOT", friendlyName="jpa-osiv")
@Category(name = "org.mule.tooling.category.core", description = "Components")
public class Interceptor {	
	private static Log logger = LogFactory.getLog(Interceptor.class);
	
	@PersistenceContext 
	EntityManager injectedEntityManager; // might get injected by the Mule-jpa module...but it doesnt seem to relibly inject EMs

	/**
     * The invocation variable name you want the EntityManager stored in
     * default: jpa-entitymanager usage: flowVars['jpa-entitymanager']
     */
    @Configurable
    @Optional
    @Default ("jpa-entitymanager")
    private String entityManagerFlowVarName;
    
    public String getEntityManagerFlowVarName() {
		return entityManagerFlowVarName;
	}

	public void setEntityManagerFlowVarName(String emVariableName) {
		this.entityManagerFlowVarName = emVariableName;
	}
    
    
	/**
     * A reference to EntityManagerFactory usedd to obtain EntityManager with.
     * Usually a ref to a spring bean for EntityManagerFactory
     */
    @Configurable
    @Optional
    private EntityManagerFactory entityManagerFactory;

	private Boolean logExecutionTime;

	/***
     * 
     * @return EntityManagerFactory
     */
    public EntityManagerFactory getEntityManagerFactory() {
		return entityManagerFactory;
	}
    
    /***
     * 
     * @param entityManagerFactory
     */
	public void setEntityManagerFactory(EntityManagerFactory entityManagerFactory) {
		this.entityManagerFactory = entityManagerFactory;
	}
	
	/**
     * Custom processor
     *
     * {@sample.xml ../../../doc/jpa-osiv-connector.xml.sample osiv:process}
     * 
     * @param event event
     * @param sourceCallback scb
     * @param logExecutionTime whether or not to log the execution time of the processor-chain we intercepted (default=true)
     * @return MuleEvent whatever
     * @throws MuleException for fun
     */
    @Processor (intercepting=true)
    @Inject
    public MuleEvent process(MuleEvent event, SourceCallback sourceCallback, @Optional @Default("true") Boolean logExecutionTime) throws MuleException
    {
    	boolean exceptionWasThrown = true;
        long startTime = System.currentTimeMillis();
        ProcessingTime time = event.getProcessingTime();
        this.logExecutionTime = logExecutionTime;
        MuleEvent resultEvent = event;
        try
        {
            resultEvent = before(event);
            resultEvent = sourceCallback.processEvent(resultEvent);
            resultEvent = after(resultEvent);
            exceptionWasThrown = false;
        }
        finally
        {
            resultEvent = last(resultEvent, time, startTime, exceptionWasThrown);
        }
        return resultEvent;
    }
    
    private MuleEvent before(MuleEvent event) throws MuleException {
    	if (logger.isDebugEnabled()){
    		logger.debug(String.format("Intercepting flow: %s for JPA EM injection. event_id: %s",event.getFlowConstruct().getName(), event.getId()));
    	}
    	String emStatus ="";
    	String emfStatus ="";
    	
		EntityManager flowEm=null;
		// TODO what if em flow var already exists?
		if (this.injectedEntityManager != null){
			emStatus ="EntityManager was injected by mule jpa-module ";
			flowEm = injectedEntityManager;
		} else {
			emStatus ="EntityManager was NOT injected by mule jpa-module. ";
			
			if (entityManagerFactory != null){
				emfStatus = "Obtaining from configured EntityManagerFactory.";
				flowEm = entityManagerFactory.createEntityManager();
			} else {
				emfStatus = "No entityManagerFactory was configured for this module. No EntityManager will be available!";
			}
		}
		
		String logMsg = String.format("%s %s",emStatus, emfStatus);
		if (flowEm != null){
			if (logger.isTraceEnabled()) {
				logger.trace(logMsg);
				logger.trace(String.format("entityManager avaialble in flowVars['%s']", entityManagerFlowVarName));
			}	
		} else {
			logger.error(logMsg);
		}
		event.setFlowVariable(entityManagerFlowVarName, flowEm);
		return event;
	}
    
    private MuleEvent after(MuleEvent event) throws MuleException {
		return event;
	}
    
    private MuleEvent last(MuleEvent event, ProcessingTime time, long startTime, boolean exceptionWasThrown) throws MuleException {
		EntityManager flowEm = ((EntityManager)event.getFlowVariable(entityManagerFlowVarName));
		if (flowEm != null ){
			if ( logger.isTraceEnabled()){
				logger.trace(String.format("closing entityManager & removing flowVars['%s']", entityManagerFlowVarName));
			}
			flowEm.close();
			flowEm = null;
			event.removeFlowVariable(entityManagerFlowVarName);
		}
		
		if (logExecutionTime && logger.isInfoEnabled()){
			long executionTime = System.currentTimeMillis() - startTime;
			
			String msg = String.format("{\"timer\": {\"execution_ms\": %d, \"flow\": \"%s\", \"event_id\":\"%s\"}}", 
					executionTime,
					event.getFlowConstruct().getName(),
					event.getId()
					);
	        logger.info(msg);
	    }
		return event;

	}
}
